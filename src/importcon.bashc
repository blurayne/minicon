#!/bin/bash
#
# importcon - Imports a filesystem to a container (copying the features from other container)
# https://github.com/grycap/minicon
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function usage() {
  cat <<EOF

importcon is a tool that imports the contents from a tarball to create a filesystem image 
  using the "docker import" command. But it takes as reference an existing docker image to
  get parameters such as ENV, USER, WORKDIR, etc. to set them for the new imported image.

$0 <options> <container filesystem in tar file>

  --image | -i <image>      Name of the existing image to copy the parameters
  --tag | -t <tag>          Tag for the imported image (random if not provided)
  --env | -E                Copy ENV settings
  --entrypoint | -e         Copy ENTRYPOINT settings
  --expose | -x             Copy EXPOSE settings
  --onbuild | -o            Copy ONBUILD settings
  --user | -u               Copy USER settings
  --volume | -V             Copy VOLUME settings
  --workdir | -w            Copy WORKDIR settins
  --cmd | -c                Copy CMD settings
  --all | -A                Copy all the previous settings: ENV, ENTRYPOINT, EXPOSE,
                            ONBUILD, USER, VOLUME, WORKDIR and CMD.
  --keeptemporary | -k      Keeps the temporary folder. Otherwise, the folder is removed (if it is
                            created by mergecon).
  --version | -V            Shows the version number and finalizes.
  --verbose | -v            Shows more information about the procedure.
  --debug                   Shows a lot more information about the procedure.
  --help | -h               Shows this help and exits.

EOF
}

function verify_dependencies() {
  if ! docker --version > /dev/null 2> /dev/null; then
    bashc.finalize 1 "docker command is needed to import the image"
  fi
  if ! jq --version > /dev/null 2> /dev/null; then
    bashc.finalize 1 "jq command is needed"
  fi
}

source all.bashc
source lib/dockerutils.bashc
source version

OUTFILE=
# Parse the commandline into an array
bashc.parameter_parse_commandline "$@"
bashc.parameters_start

while bashc.parameters_next; do
  PARAM="$(bashc.parameters_current)"
  case "$PARAM" in
    --image|-i)             bashc.parameters_next
                            FROMIMAGE="$(bashc.parameters_current)";;
    --tag|-t)               bashc.parameters_next
                            NEWNAME="$(bashc.parameters_current)";;
    --env|-E)               COPY_ENV=true;;
    --entrypoint|-e)        COPY_ENTRYPOINT=true;;
    --expose|-x)            COPY_EXPOSE=true;;
    --onbuild|-o)           COPY_ONBUILD=true;;
    --user|-u)              COPY_USER=true;;
    --volume|-V)            COPY_VOLUME=true;;
    --workdir|-w)           COPY_WORKDIR=true;;
    --cmd|-c)               COPY_CMD=true;;
    --all|-A)               COPY_ENV=true
                            COPY_ENTRYPOINT=true
                            COPY_EXPOSE=true
                            COPY_ONBUILD=true
                            COPY_USER=true
                            COPY_VOLUME=true
                            COPY_WORKDIR=true
                            COPY_CMD=true;;
    --simulate|-s)          SIMULATEONLY=true;;
    --verbose|-v)           VERBOSE=true;;
    --debug)                DEBUG=true;;
    --version | -V)         echo "$VERSION" && bashc.finalize;;
    --help | -h)            usage && bashc.finalize;;
    --keeptemporary|-k)     KEEPTEMPORARY="true";;
    *)                      [ "$FILENAME" != "" ] && usage && bashc.finalize 1 "invalid parameter $PARAM. already provided a filename"
                            FILENAME="$PARAM";;
  esac
done

verify_dependencies

if [ "$FILENAME" != "" ]; then
  VALIDFILENAME="$(readlink -e "$FILENAME")"
fi

if [ "$VALIDFILENAME" == "" ]; then
  bashc.finalize 1 "filename '$FILENAME' is invalid"
fi

FILENAME="$VALIDFILENAME"

if [ "$NEWNAME" == "" ]; then
  NEWNAME="$(generate_dockerimagename)"
fi
NEWNAME=$(correct_dockerimagename "$NEWNAME")

p_out "$NEWNAME"

function build_docker_cmdline() {
  local LINES="$1"
  local KW="$2"

  while read L; do
    if [ "$L" != "" ]; then
      if [ "$L" != "null" ]; then
        CMDLINE+=("-c")
        CMDLINE+=("$KW $L")
        p_debug "adding -c $KW $L"
      else
        p_debug "ignoring field $KW because it has value '$L' in the original container"
      fi
    fi
  done <<< "$LINES"
}

parameters="\
COPY_ENV Env ENV
COPY_USER User USER
COPY_ENTRYPOINT Entrypoint ENTRYPOINT join raw
COPY_ONBUILD OnBuild ONBUILD
COPY_VOLUME Volumes VOLUME nojoin raw |keys[]
COPY_WORKDIR WorkingDir WORKDIR raw
COPY_CMD Cmd CMD join raw
COPY_EXPOSE ExposedPorts EXPOSE nojoin raw |keys[]"

while read L; do
  read VARCOND FIELD KW JOIN RAW XTRA <<< "$L"
  if [ "${!VARCOND}" == "true" ]; then
    if [ "$RAW" == "raw" ]; then
      RES="$(get_config_field_raw "$FROMIMAGE" "$FIELD" "$XTRA")"
    else
      RES="$(get_config_field "$FROMIMAGE" "$FIELD" "$XTRA")"
    fi
    if [ "$JOIN" == "join" ]; then
      RES="$(echo "$RES" | tr '\n' ' ')"
    fi
    build_docker_cmdline "$RES" "$KW" 
  fi
done <<< "${parameters}"

p_debug docker import "${CMDLINE[@]}" "$FILENAME" "$NEWNAME"

if [ "$SIMULATEONLY" != "true" ]; then
  docker import "${CMDLINE[@]}" "$FILENAME" "$NEWNAME" > /dev/null
else
  p_warning "not executed because of commandline options"
fi